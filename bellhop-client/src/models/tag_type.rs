/* 
 * Bellhop
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TagType {
  #[serde(rename = "id")]
  id: i32,
  #[serde(rename = "asset_type_id")]
  asset_type_id: i32,
  #[serde(rename = "name")]
  name: String,
  #[serde(rename = "detail_only")]
  detail_only: bool,
  #[serde(rename = "rightness")]
  rightness: i32
}

impl TagType {
  pub fn new(id: i32, asset_type_id: i32, name: String, detail_only: bool, rightness: i32) -> TagType {
    TagType {
      id: id,
      asset_type_id: asset_type_id,
      name: name,
      detail_only: detail_only,
      rightness: rightness
    }
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = id;
  }

  pub fn with_id(mut self, id: i32) -> TagType {
    self.id = id;
    self
  }

  pub fn id(&self) -> &i32 {
    &self.id
  }


  pub fn set_asset_type_id(&mut self, asset_type_id: i32) {
    self.asset_type_id = asset_type_id;
  }

  pub fn with_asset_type_id(mut self, asset_type_id: i32) -> TagType {
    self.asset_type_id = asset_type_id;
    self
  }

  pub fn asset_type_id(&self) -> &i32 {
    &self.asset_type_id
  }


  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> TagType {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_detail_only(&mut self, detail_only: bool) {
    self.detail_only = detail_only;
  }

  pub fn with_detail_only(mut self, detail_only: bool) -> TagType {
    self.detail_only = detail_only;
    self
  }

  pub fn detail_only(&self) -> &bool {
    &self.detail_only
  }


  pub fn set_rightness(&mut self, rightness: i32) {
    self.rightness = rightness;
  }

  pub fn with_rightness(mut self, rightness: i32) -> TagType {
    self.rightness = rightness;
    self
  }

  pub fn rightness(&self) -> &i32 {
    &self.rightness
  }


}



