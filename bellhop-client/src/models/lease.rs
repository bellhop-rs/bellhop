/* 
 * Bellhop
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Lease {
  #[serde(rename = "id")]
  id: i32,
  #[serde(rename = "user_id")]
  user_id: i32,
  #[serde(rename = "last_notified")]
  last_notified: String,
  #[serde(rename = "end_time")]
  end_time: String,
  #[serde(rename = "start_time")]
  start_time: Option<String>
}

impl Lease {
  pub fn new(id: i32, user_id: i32, last_notified: String, end_time: String) -> Lease {
    Lease {
      id: id,
      user_id: user_id,
      last_notified: last_notified,
      end_time: end_time,
      start_time: None
    }
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = id;
  }

  pub fn with_id(mut self, id: i32) -> Lease {
    self.id = id;
    self
  }

  pub fn id(&self) -> &i32 {
    &self.id
  }


  pub fn set_user_id(&mut self, user_id: i32) {
    self.user_id = user_id;
  }

  pub fn with_user_id(mut self, user_id: i32) -> Lease {
    self.user_id = user_id;
    self
  }

  pub fn user_id(&self) -> &i32 {
    &self.user_id
  }


  pub fn set_last_notified(&mut self, last_notified: String) {
    self.last_notified = last_notified;
  }

  pub fn with_last_notified(mut self, last_notified: String) -> Lease {
    self.last_notified = last_notified;
    self
  }

  pub fn last_notified(&self) -> &String {
    &self.last_notified
  }


  pub fn set_end_time(&mut self, end_time: String) {
    self.end_time = end_time;
  }

  pub fn with_end_time(mut self, end_time: String) -> Lease {
    self.end_time = end_time;
    self
  }

  pub fn end_time(&self) -> &String {
    &self.end_time
  }


  pub fn set_start_time(&mut self, start_time: String) {
    self.start_time = Some(start_time);
  }

  pub fn with_start_time(mut self, start_time: String) -> Lease {
    self.start_time = Some(start_time);
    self
  }

  pub fn start_time(&self) -> Option<&String> {
    self.start_time.as_ref()
  }

  pub fn reset_start_time(&mut self) {
    self.start_time = None;
  }

}



