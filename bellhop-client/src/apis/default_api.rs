/* 
 * Bellhop
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use reqwest;

use super::{Error, configuration};

pub struct DefaultApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl DefaultApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> DefaultApiClient {
        DefaultApiClient {
            configuration: configuration,
        }
    }
}

pub trait DefaultApi {
    fn create_asset(&self, create_asset: ::models::CreateAsset) -> Result<::models::Asset, Error>;
    fn create_asset_type(&self, create_asset_type: ::models::CreateAssetType) -> Result<::models::AssetType, Error>;
    fn create_lease(&self, asset_id: i32, create_lease: ::models::CreateLease) -> Result<::models::Lease, Error>;
    fn create_tag(&self, asset_id: i32, create_tag: ::models::CreateTag) -> Result<::models::Tag, Error>;
    fn create_tag_type(&self, asset_type_id: i32, create_tag_type: ::models::CreateTagType) -> Result<::models::TagType, Error>;
    fn delete_lease(&self, asset_id: i32) -> Result<(), Error>;
    fn list_asset_types(&self, ) -> Result<::models::AssetTypes, Error>;
    fn list_assets(&self, ) -> Result<::models::Assets, Error>;
    fn list_sub_assets(&self, asset_type_id: i32) -> Result<::models::Assets, Error>;
    fn list_tag_types(&self, asset_type_id: i32) -> Result<::models::TagTypes, Error>;
    fn list_tags(&self, asset_id: i32) -> Result<::models::Tags, Error>;
    fn show_asset(&self, asset_id: i32) -> Result<::models::Asset, Error>;
    fn show_asset_type(&self, asset_type_id: i32) -> Result<::models::AssetType, Error>;
    fn show_lease(&self, asset_id: i32) -> Result<::models::Lease, Error>;
    fn show_tag(&self, asset_id: i32, tag_type_id: i32) -> Result<::models::Tag, Error>;
    fn show_tag_type(&self, asset_type_id: i32, tag_type_id: i32) -> Result<::models::TagType, Error>;
}


impl DefaultApi for DefaultApiClient {
    fn create_asset(&self, create_asset: ::models::CreateAsset) -> Result<::models::Asset, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/assets?{}", configuration.base_path, query_string);

        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }



        req_builder = req_builder.json(&create_asset);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn create_asset_type(&self, create_asset_type: ::models::CreateAssetType) -> Result<::models::AssetType, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/types?{}", configuration.base_path, query_string);

        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }



        req_builder = req_builder.json(&create_asset_type);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn create_lease(&self, asset_id: i32, create_lease: ::models::CreateLease) -> Result<::models::Lease, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/assets/{asset_id}/lease?{}", configuration.base_path, query_string, asset_id=asset_id);

        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }



        req_builder = req_builder.json(&create_lease);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn create_tag(&self, asset_id: i32, create_tag: ::models::CreateTag) -> Result<::models::Tag, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/assets/{asset_id}/tags?{}", configuration.base_path, query_string, asset_id=asset_id);

        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }



        req_builder = req_builder.json(&create_tag);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn create_tag_type(&self, asset_type_id: i32, create_tag_type: ::models::CreateTagType) -> Result<::models::TagType, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/types/{asset_type_id}/tag-types?{}", configuration.base_path, query_string, asset_type_id=asset_type_id);

        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }



        req_builder = req_builder.json(&create_tag_type);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn delete_lease(&self, asset_id: i32) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/assets/{asset_id}/lease?{}", configuration.base_path, query_string, asset_id=asset_id);

        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }




        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn list_asset_types(&self, ) -> Result<::models::AssetTypes, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/types?{}", configuration.base_path, query_string);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }




        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn list_assets(&self, ) -> Result<::models::Assets, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/assets?{}", configuration.base_path, query_string);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }




        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn list_sub_assets(&self, asset_type_id: i32) -> Result<::models::Assets, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/types/{asset_type_id}/assets?{}", configuration.base_path, query_string, asset_type_id=asset_type_id);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }




        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn list_tag_types(&self, asset_type_id: i32) -> Result<::models::TagTypes, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/types/{asset_type_id}/tag-types?{}", configuration.base_path, query_string, asset_type_id=asset_type_id);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }




        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn list_tags(&self, asset_id: i32) -> Result<::models::Tags, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/assets/{asset_id}/tags?{}", configuration.base_path, query_string, asset_id=asset_id);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }




        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn show_asset(&self, asset_id: i32) -> Result<::models::Asset, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/assets/{asset_id}?{}", configuration.base_path, query_string, asset_id=asset_id);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }




        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn show_asset_type(&self, asset_type_id: i32) -> Result<::models::AssetType, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/types/{asset_type_id}?{}", configuration.base_path, query_string, asset_type_id=asset_type_id);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }




        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn show_lease(&self, asset_id: i32) -> Result<::models::Lease, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/assets/{asset_id}/lease?{}", configuration.base_path, query_string, asset_id=asset_id);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }




        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn show_tag(&self, asset_id: i32, tag_type_id: i32) -> Result<::models::Tag, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/assets/{asset_id}/tags/{tag_type_id}?{}", configuration.base_path, query_string, asset_id=asset_id, tag_type_id=tag_type_id);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }




        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn show_tag_type(&self, asset_type_id: i32, tag_type_id: i32) -> Result<::models::TagType, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/types/{asset_type_id}/tag-types/{tag_type_id}?{}", configuration.base_path, query_string, asset_type_id=asset_type_id, tag_type_id=tag_type_id);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }




        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

}
